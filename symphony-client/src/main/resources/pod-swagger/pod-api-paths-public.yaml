swagger: '2.0'
info:
  version: '${project.version}'
  title: Pod API
  description: |
    This document refers to Symphony API calls that do not need
    encryption or decryption of content.

    - sessionToken can be obtained by calling the
    authenticationAPI on the symphony back end and the key manager
    respectively. Refer to the methods described in authenticatorAPI.yaml.
    - Actions are defined to be atomic, ie will succeed in their entirety
    or fail and have changed nothing.
    - If it returns a 40X status then it will have made no change to the
    system even if ome subset of the request would have succeeded.
    - If this contract cannot be met for any reason then this is an error
    and the response code will be 50X.
paths:
  '/v1/companycert/list':
    get:
      summary: List all trusted certs
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: skip
          description: Pagination start
          in: query
          required: false
          type: integer
        - name: limit
          description: Row limit
          in: query
          required: false
          type: integer
      tags:
        - Security
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertInfoList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/companycert/create':
    post:
      summary: Create a company trusted or untrusted certificate.
        Different from V1 in that we reject expired certificates.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: cert
          in: body
          required: true
          schema:
            $ref: '#/definitions/CompanyCert'
      tags:
        - Security
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertDetail'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/companycert/delete':
    post:
      summary: Delete a company certificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: fingerPrint
          in: body
          required: true
          schema:
            $ref: '#/definitions/StringId'
      tags:
        - Security
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/companycert/{fingerPrint}/get':
    get:
      summary: Get the details of a company certificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fingerPrint
          description: Certificate fingerPrint (ID)
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Security
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertDetail'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/companycert/{fingerPrint}/update':
    post:
      summary: Update a company certificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fingerPrint
          description: Certificate fingerPrint (ID)
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: certAttributes
          in: body
          required: true
          schema:
            $ref: '#/definitions/CompanyCertAttributes'
      tags:
        - Security
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/companycert/{fingerPrint}/issuedBy':
    get:
      summary: |
        Return a list of all certificates which were verified to the cert whose
        fingerprint is passed.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fingerPrint
          description: Certificate fingerPrint (ID)
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Security
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertInfoList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/companycert/podmanaged/list':
    get:
      summary: List all trusted certs
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: skip
          description: Pagination start
          in: query
          required: false
          type: integer
        - name: limit
          description: Row limit
          in: query
          required: false
          type: integer
      tags:
        - Security
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertInfoList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/companycert/type/list':
    post:
      summary: List all certs of the given types
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: typeIdList
          description: Certificate type list
          in: body
          required: true
          schema:
            $ref: '#/definitions/CompanyCertTypeList'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: skip
          description: Pagination start
          in: query
          required: false
          type: integer
        - name: limit
          description: Row limit
          in: query
          required: false
          type: integer
      tags:
        - Security
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertInfoList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/connection/list':
    get:
      summary: List of requesting user's connection
      description: |
        This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those
        in which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only
        return results for both "pending_incoming" and "pending_outgoing". You can optionally filter by userIds to further restrict the results of
        a specific connection status. If the users are in the same private pod, the users have an implicit connection status of "accepted". Those
        users will not be returned in the response if you don't specify the connection status as "accepted" (default is "pending")
        and the explicit userIds in the request.
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: status
          description: |
            Filter the connection list based on the connection status.
            The connection status can only be pending_incoming, pending_outgoing, accepted, rejected, or all (all of the above)
          in: query
          type: string
          enum:
            - PENDING_INCOMING
            - PENDING_OUTGOING
            - ACCEPTED
            - REJECTED
            - ALL
        - name: userIds
          description: |
            The userIds parameter should be specified as a comma delimited list of user ids and can be used to restrict the results of a specific connection.
            Note that this is particularly important if the caller intends to retrieve results for implicit connection (user within the same pod).
            Implicit connections will not be included in the response if userId is not provided.
          in: query
          type: string
      tags:
        - Connection
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserConnectionList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Connection cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/connection/create':
    post:
      summary: Sends an invitation to connect with another user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: connectionRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserConnectionRequest'
      tags:
        - Connection
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserConnection'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: User cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/connection/accept':
    post:
      summary: Accept the connection request for the requesting user
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: connectionRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserConnectionRequest'
      tags:
        - Connection
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserConnection'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Connection cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/connection/reject':
    post:
      summary: Reject the connection request for the requesting user.
      description: |
        Reject the connection between the requesting user and request sender. If both users are in the same private pod,
        an error will be returned because both users have an implicit connection which cannot be rejected.
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: connectionRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserConnectionRequest'
      tags:
        - Connection
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserConnection'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/connection/user/{userId}/info':
    get:
      summary: The status of the connection invitation to another user.
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: userId
          description: user Id
          in: path
          required: true
          type: string
      tags:
        - Connection
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserConnection'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Connection cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/im/create':
    post:
      summary: Create a new single or multi party instant message conversation between the caller and specified users.
      description: |
          At least one user ID must be provided or
          an error response will be sent.

          The caller is implicitly included in the members of the
          created chat.

          Duplicate users will be included in the membership of the chat but
          the duplication will be silently ignored.

          If there is an existing IM conversation with the same set of participants then
          the id of that existing stream will be returned.

          This method was incorrectly specified to take a query parameter in
          version 1.0 of this specification but now expects a JSON array of
          user IDs in the body of the request.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uidList
          description: List of (integer) User IDs of participants
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserIdList'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Stream'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/room/create':
    post:
      summary: Create a new chatroom.
      description: |
        Create a new chatroom.

        If no  attributes are specified, the room is created as a private chatroom.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/V2RoomAttributes'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2RoomDetail'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/room/search':
    post:
      summary: Search rooms according to the specified criteria.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: skip
          description: |
            No. of results to skip.
          in: query
          type: integer
        - name: limit
          description: |
            Max no. of results to return. If no value is provided, 50 is the default. Must be a positive
            integer and must not exceed 100
          in: query
          type: integer
          required: false
        - name: query
          description: The search query object.
          in: body
          required: true
          schema:
            $ref: '#/definitions/RoomSearchCriteria'
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomSearchResults'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/room/{id}/info':
    get:
      summary: Get information about a partcular chatroom.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2RoomDetail'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/room/{id}/setActive':
    post:
      summary: Deactivate or reactivate a chatroom. At creation, a new chatroom is active.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: active
          in: query
          required: true
          type: boolean
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomDetail'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/room/{id}/update':
    post:
      summary: Update the attributes of an existing chatroom.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/V2RoomAttributes'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2RoomDetail'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/room/{id}/membership/add':
    post:
      summary: Adds new member to an existing room.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserId'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Room Membership
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/room/{id}/membership/remove':
    post:
      summary: Removes member from an existing room.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserId'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Room Membership
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/room/{id}/membership/promoteOwner':
    post:
      summary: Promotes user to owner.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserId'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Room Membership
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/room/{id}/membership/demoteOwner':
    post:
      summary: Demotes room owner.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserId'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Room Membership
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/room/{id}/membership/list':
    get:
      summary: Lists current members of an existing room.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Room Membership
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MembershipList'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/sessioninfo':
    get:
      summary: Get information about the current user's session.
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Session
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserV2'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/user':
    get:
      summary: Get user information
      produces:
        - application/json
      parameters:
        - name: uid
          description: User ID as a decimal integer
          in: query
          required: false
          type: integer
          format: int64
        - name: email
          description: Email address
          in: query
          required: false
          type: string
          format: email
        - name: username
          description: login user name
          in: query
          required: false
          type: string
        - name: local
          description: |
            If true then a local DB search will be performed and only local pod users will be
            returned. If absent or false then a directory search will be performed and users
            from other pods who are visible to the calling user will also be returned.
            Note: for username search, the local flag must be true
          in: query
          required: false
          type: boolean
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Users
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserV2'
        '204':
          description: 'No user found.'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/user/presence':
    get:
      summary: Get presence information about the requesting user.
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Presence
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Presence'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Invalid session token'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Set the presence of the requesting user.
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: presence
          in: body
          required: true
          schema:
            $ref: '#/definitions/Presence'
      tags:
        - Presence
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Presence'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Invalid session token.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/user/presence/register':
    post:
      summary: Register interest in a user's presence status
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uidList
          description: List of (integer) User IDs of users whose presence to query
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserIdList'
      tags:
      - Presence
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: user id cannot be located.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/user/search':
    post:
      summary: Search for users by name or email address
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: skip
          description: number of records to skip
          in: query
          type: integer
        - name: limit
          description: Max number of records to return. If no value is provided, 50 is the default.
          in: query
          type: integer
        - name: local
          description: |
             If true then a local DB search will be performed and only local pod users will be
             returned. If absent or false then a directory search will be performed and users
             from other pods who are visible to the calling user will also be returned.
          in: query
          required: false
          type: boolean
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: searchRequest
          description: search criteria
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserSearchQuery'
      tags:
        - Users
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserSearchResults'
        '204':
          description: 'No user found.'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/user/{uid}/presence':
    get:
      summary: Get presence information about a particular user.
      produces:
        - application/json
      parameters:
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: local
          description: |
              If true, a local query will be performed and the presence will be
              set to OFFLINE for users who are not local to the calling user's
              pod. If false or absent, then the presence of all local users and
              the presence of all external users to whom the calling user is
              connected will be queried.

              For external users, a "presence interest" should be registered through
              /v1/user/presence/register before querying for presence.
          in: query
          type: boolean
          required: false
          default: false
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Presence
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Presence'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: user id cannot be located.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/streams/list':
    post:
      summary: |
        Retrieve a list of all streams of which the requesting user is a member,
        sorted by creation date (ascending).
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: skip
          description: |
            No. of results to skip.
          in: query
          type: integer
        - name: limit
          description: |
            Max no. of results to return. If no value is provided, 50 is the default.
          in: query
          type: integer
        - name: filter
          description: Stream filtering criteria.
          in: body
          schema:
            $ref: '#/definitions/StreamFilter'
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StreamList'
        '204':
            description: 'Stream not found.'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/streams/{sid}/info':
    get:
      summary: Get information about a partcular stream.
      produces:
        - application/json
      parameters:
        - name: sid
          description: Stream Id
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StreamAttributes'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/app/entitlement/list':
    get:
      summary: Get the list of application entitlements for the company
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - AppEntitlement
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PodAppEntitlementList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Update the application entitlements for the company
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/PodAppEntitlementList'
      tags:
        - AppEntitlement
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PodAppEntitlementList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/disclaimer/{did}':
    get:
      summary: Get a disclaimer by disclaimer id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: did
          in: path
          type: string
          description: The ID of the entity
          required: true
      tags:
        - Disclaimer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Disclaimer'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/disclaimer/list':
    get:
      summary: List all disclaimers for the company (pod)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Disclaimer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DisclaimerList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/disclaimer/{did}/users':
    get:
      summary: List all users assigned to this disclaimer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: did
          in: path
          type: string
          description: The ID of the entity
          required: true
      tags:
        - Disclaimer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserIdList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/group/list':
    get:
      summary: Get a list of all Information Barrier Groups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - InfoBarriers
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GroupList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/group/{gid}/membership/list':
    get:
      summary: Get the list of userids in this Information Barrier Group
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: gid
          description: URL-Safe encoded Group ID
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - InfoBarriers
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IntegerList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/group/{gid}/membership/add':
    post:
      summary: Add members to an Information Barrier group.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: gid
          description: URL-Safe encoded Group ID
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: users
          in: body
          required: true
          schema:
            $ref: '#/definitions/IntegerList'
      tags:
        - InfoBarriers
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BulkActionResult'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/group/{gid}/membership/remove':
    post:
      summary: Remove members from an Information Barrier group
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: gid
          description: URL-Safe encoded Group ID
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: users
          in: body
          required: true
          schema:
            $ref: '#/definitions/IntegerList'
      tags:
        - InfoBarriers
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BulkActionResult'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/im/create':
    post:
      summary: Create a new single or multi party instant message conversation
      description: |
          At least two user IDs must be provided or
          an error response will be sent.

          The caller is not included in the members of the
          created chat.

          Duplicate users will be included in the membership of the chat but
          the duplication will be silently ignored.

          If there is an existing IM conversation with the same set of participants then
          the id of that existing stream will be returned.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uidList
          description: List of (integer) User IDs of participants
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserIdList'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Stream'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/messagesuppression/{id}/suppress':
    post:
      summary: Suppress a message
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          description: URL-Safe encoded Message ID
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - MessageSuppression
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MessageSuppressionResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/policy/list':
    get:
      summary: Get all Information Policies
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - InfoBarriers
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PolicyList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/room/{id}/membership/list':
    get:
      summary: Lists current and previous members of an existing room.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: includePastMembers
          in: query
          required: false
          type: boolean
          description: If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false.
      tags:
        - Room Membership
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MembershipList'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/room/{id}/membership/add':
    post:
      summary: Add a member to an existing room.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserId'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Room Membership
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/room/{id}/membership/remove':
    post:
      summary: Remove a member from a room.
      produces:
        - application/json
      parameters:
        - name: id
          description: Room streamId
          in: path
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserId'
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Room Membership
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/create':
    post:
      summary: Create a new user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserCreate'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserDetail'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/list':
    get:
      summary: Retreive a list of all users in the company (pod)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserIdList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}':
    get:
      summary: Retreive user details for a particular user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserDetail'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/update':
    post:
      summary: Update an existing user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserAttributes'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserDetail'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/find':
    post:
      summary: Find a user based on attributes
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: skip
          description: Number of users to skip. Default is 0. Must be a integer equals or bigger than 0.
          in: query
          type: integer
          required: false
        - name: limit
          description: Maximum number of users to return. Default is 100. Must be a positive
            integer and must not exceed 1000.
          in: query
          type: integer
          required: false
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserFilter'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserDetailList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/roles/add':
    post:
      summary: Add a role to a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/String'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/roles/remove':
    post:
      summary: Remove a role from a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/String'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/app/entitlement/list':
    get:
      summary: Get the list of application entitlements for this user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - AppEntitlement
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserAppEntitlementList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Update the application entitlements for this user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserAppEntitlementList'
      tags:
        - AppEntitlement
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserAppEntitlementList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/avatar':
    get:
      summary: Get the URL of the avatar of a particular user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AvatarList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/avatar/update':
    post:
      summary: Update the avatar of a particular user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/AvatarUpdate'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/disclaimer':
    get:
      summary: Get the disclaimer assigned to a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Disclaimer'
        '204':
          description: No content. User doesn't have an assigned disclaimer
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/disclaimer/update':
    post:
      summary: Assign a disclaimer to a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/StringId'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/delegates':
    get:
      summary: Get the delegates assigned to a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - User
      responses:
        '200':
          description: The userid's of the delegates of this user.
          schema:
            $ref: '#/definitions/IntegerList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/delegates/update':
    post:
      summary: Update the delegates assigned to a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/DelegateAction'
      tags:
        - User
      responses:
        '200':
          description: Sucesss.
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/features':
    get:
      summary: Get the list of Symphony feature entitlements enabled for a particular user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FeatureList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/features/update':
    post:
      summary: Update the list of Symphony feature entitlements for a particular user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/FeatureList'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/status':
    get:
      summary: Get the status, active or inactive, for a particular user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserStatus'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/user/{uid}/status/update':
    post:
      summary: Update the status of a particular user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: uid
          description: |
            User ID as a decimal integer
          in: path
          required: true
          type: integer
          format: int64
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserStatus'
      tags:
        - User
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/streams/list':
    post:
      summary: |
        Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: skip
          description: |
           Number of items to skip. Default is 0.
          in: query
          type: integer
        - name: limit
          description: |
           Maximum number of items to return. Default is 50.  This value cannot exceed 100.
          in: query
          type: integer
        - name: filter
          description: Stream filtering criteria.
          in: body
          schema:
            $ref: '#/definitions/AdminStreamFilter'
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AdminStreamList'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/stream/{id}/membership/list':
    get:
      summary: List the current members of an existing stream.  The stream can be of type IM, MIM, or ROOM
      produces:
        - application/json
      parameters:
        - name: id
          description: stream Id
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: skip
          description: Number of items to skip. Default is 0.
          in: query
          type: integer
          required: false
        - name: limit
          description: Maximum number of items to return. Default is 100 and not to exceed 1000.
          in: query
          type: integer
          required: false
      tags:
        - Streams
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2MembershipList'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/system/features/list':
    get:
      summary: Get the full set of Symphony features available for this pod
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - System
      responses:
        '200':
          description: The list of valid feature entitlement names.
          schema:
            $ref: '#/definitions/StringList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/system/protocols/list':
    get:
      summary: Get a list of all URI protocols supported by the company (pod)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - System
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StringList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/system/roles/list':
    get:
      summary: Get a list of all roles available in the company (pod)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - System
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RoleDetailList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/message/{mid}/status':
    get:
      summary: Get the read status of a particular message.
      produces:
        - application/json
      parameters:
        - name: mid
          description: Message ID
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
      tags:
        - Message
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MessageStatus'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not found: The informed Message ID does not exist'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/admin/app/create':
    post:
      summary: Creates a new app
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: applicationDetail
          description: Application detail to create the app with
          in: body
          required: true
          schema:
            $ref: '#/definitions/ApplicationDetail'
      tags:
        - Application
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ApplicationDetail'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
