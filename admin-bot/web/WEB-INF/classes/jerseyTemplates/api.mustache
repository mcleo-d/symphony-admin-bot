package {{package}};

import {{modelPackage}}.*;
import {{package}}.{{classname}}Service;
import {{package}}.factories.{{classname}}ServiceFactory;

import io.swagger.annotations.ApiParam;

{{#imports}}import {{import}};
{{/imports}}

import java.util.List;
import java.util.UUID;
import java.util.concurrent.Callable;
import java.io.InputStream;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;
import org.glassfish.jersey.media.multipart.FormDataBodyPart;
import org.slf4j.MDC;

import java.io.IOException;

@Path("{{basePathWithoutHost}}/{{baseName}}")
{{#hasConsumes}}@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
{{#hasProduces}}@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
@io.swagger.annotations.Api(value = "/{{baseName}}", description = "the {{baseName}} API")
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}  {
    private final {{classname}}Service delegate = {{classname}}ServiceFactory.get{{classname}}();

{{#operation}}
    @{{httpMethod}}
    {{#subresourceOperation}}@Path("{{path}}"){{/subresourceOperation}}
    {{#hasConsumes}}@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
    {{#hasProduces}}@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
    @io.swagger.annotations.ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}", response = {{{returnType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}{{#hasAuthMethods}}, authorizations = {
        {{#authMethods}}@io.swagger.annotations.Authorization(value = "{{name}}"{{#isOAuth}}, scopes = {
            {{#scopes}}@io.swagger.annotations.AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{#hasMore}},
            {{/hasMore}}{{/scopes}}
        }{{/isOAuth}}){{#hasMore}},
        {{/hasMore}}{{/authMethods}}
    }{{/hasAuthMethods}})
    @io.swagger.annotations.ApiResponses(value = { {{#responses}}
        @io.swagger.annotations.ApiResponse(code = {{{code}}}, message = "{{{message}}}", response = {{{returnType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}){{#hasMore}},
        {{/hasMore}}{{/responses}} })

    public Response {{nickname}}({{#allParams}}final {{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},
    {{/hasMore}}{{/allParams}}){
        try {
            {{#queryParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "query"); {{/required}}{{/queryParams}}
            {{#pathParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "path"); {{/required}}{{/pathParams}}
            {{#headerParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "header"); {{/required}}{{/headerParams}}
            {{#bodyParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "body"); {{/required}}{{/bodyParams}}
            {{#formParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "form data");{{/required}}{{/formParams}}
        } catch (Exception e) {
            return Response.status(Response.Status.BAD_REQUEST).entity("{\"code\": 400, \"message\": \""+e.getMessage()+"\"}").build();
        }

        try {
		    return delegate.{{nickname}}({{#allParams}}{{^isFormParam}}{{paramName}}{{/isFormParam}}{{#isFormParam}}{{#notFile}}({{paramName}} != null && {{paramName}}.size() > 0) ? {{paramName}}.get(0).getValue() : null{{/notFile}}{{#isFile}}{{paramName}}{{/isFile}}{{/isFormParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        } catch (ClientErrorException e) {
            return handleError(e.getResponse().getStatus(), e.getMessage());
        }
    }
{{/operation}}

	/**
	 * Validates a required parameter.
	 * Parses parameter name from camel case to sentence case.
	 * If example json class is provided, generates a json schema as example.
	 * @throws SymphonySwaggerException on null parameter value
	 */
	private void validateRequiredParameter(String paramName, Object paramValue, String requiredIn) throws BadRequestException {
		String name = paramName;
		for (int index = 0; index < name.length(); index++) {
			if (Character.isUpperCase(name.charAt(index))) {
				StringBuilder str = new StringBuilder(name);
				name = str.insert(index, " ").toString();
				index++;
			}
		}
		name = name.toLowerCase();

		if (paramValue == null) {
            throw new BadRequestException("This request requires a " + name +
                " to be provided with the " + requiredIn + ".");
		}
	}

    private Response handleError(int status, String responseBody){
        return Response.status(status).entity("{\"code\":" + status + ", \"message\": \"" + responseBody + "\"}").build();
    }

}
{{/operations}}